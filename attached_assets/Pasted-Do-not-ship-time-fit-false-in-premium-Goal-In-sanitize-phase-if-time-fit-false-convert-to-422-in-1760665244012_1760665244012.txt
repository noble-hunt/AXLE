Do not ship time_fit:false in premium

Goal: In sanitize phase, if time_fit:false, convert to 422 in strict mode.

Edit: server/ai/generators/premium.ts

Inside sanitizeWorkout() after acceptance flags are computed:

if (process.env.HOBH_PREMIUM_STRICT === 'true') {
  if (result.acceptance && result.acceptance.time_fit === false) {
    throw new Error('premium_reject:time_fit_false');
  }
  if (result.acceptance && result.acceptance.style_ok === false) {
    throw new Error('premium_reject:style_invalid');
  }
}


And make sure our dev env sets strict:

In .env (dev): HOBH_PREMIUM_STRICT=true


---

## Agent Prompt 6 — Add smoke assertions for Olympic
**Goal:** Keep us honest.



Edit: scripts/smoke-styles.js (append at bottom)

const assert = (cond, msg) => { if (!cond) { console.error('❌', msg); process.exitCode = 1; } };

async function checkOlympic() {
const res = await fetch('http://localhost:5000/api/workouts/generate
', {
method: 'POST',
headers: {'Content-Type':'application/json'},
body: JSON.stringify({ goal: 'olympic_weightlifting', durationMin: 30, intensity: 6, equipment: ['barbell'], seed: 'SMOKE_OLY_30' })
});
const json = await res.json();
const sets = json.workout?.sets || [];
const meta = json.workout?.meta || json.meta || {};
const text = JSON.stringify(sets).toLowerCase();

console.log('STYLE=olympic_weightlifting gen=%s time_fit=%s', meta.generator, meta.acceptance?.time_fit);

assert(meta.generator === 'premium', 'Expected premium generator');
assert(meta.acceptance?.time_fit === true, 'time_fit must be true');
assert(text.includes('snatch'), 'snatch required');
assert(text.includes('clean') && text.includes('jerk'), 'clean & jerk required');
}
checkOlympic().then(()=>process.exit());


---

## Agent Prompt 7 — Quick config flip (dev)
**Goal:** Ensure we’re on the right path while testing.



In your dev shell, export:
export AXLE_DISABLE_SIMPLE=true
export AXLE_DISABLE_MOCK=true
export HOBH_FORCE_PREMIUM=true
export HOBH_PREMIUM_STRICT=true

Restart the dev server so env is live.


---

# How to test right now (copy/paste)
After the agent applies the changes and restarts the server:

```bash
# Sanity: env + resolver
curl -s http://localhost:5000/api/_debug/ai | jq
curl -s http://localhost:5000/api/_debug/resolve-style \
  -H 'Content-Type: application/json' \
  -d '{"goal":"olympic_weightlifting"}' | jq

# Generate a 30-min Olympic session
curl -s http://localhost:5000/api/workouts/generate \
  -H 'Content-Type: application/json' \
  -d '{"goal":"olympic_weightlifting","durationMin":30,"intensity":6,"equipment":["barbell"],"seed":"OLY30"}' \
| jq '{ok, meta:(.workout.meta), first12:(.workout.sets[0:12] // [] | map({ex:.exercise, hdr:.is_header, dur:.duration}))}'

# Assert in one line: premium + time_fit + both lifts present
curl -s http://localhost:5000/api/workouts/generate \
  -H 'Content-Type: application/json' \
  -d '{"goal":"olympic_weightlifting","durationMin":30,"intensity":6,"equipment":["barbell"],"seed":"OLY_ASSERT"}' \
| jq -r '
  .workout.meta.generator as $g |
  .workout.meta.acceptance.time_fit as $tf |
  (.workout.sets | tostring | ascii_downcase) as $txt |
  "gen="+($g//"")+", time_fit="+($tf|tostring)+", has_snatch="+( ($txt|test("snatch"))|tostring )+", has_cj="+( ($txt|test("clean") and $txt|test("jerk"))|tostring )
'


Expected: gen=premium, time_fit=true, has_snatch=true, has_cj=true.