“Make prod /api work on Vercel (suggestions + groups)”

Goal: In production (Vercel), /api/* endpoints should exist and return the same results as dev Express. Implement Vercel Serverless Functions for at least:

GET /api/suggestions/today

GET /api/groups and POST /api/groups (list + create)

Constraints & expectations

Do not change the SPA build (Vite/Vercel config is good).

Do not proxy to Replit. Implement native serverless handlers.

Reuse existing logic from the repo wherever possible (e.g., any shared algorithm / query utilities you added for suggestions).

Auth: Read the Supabase access token from the Authorization: Bearer <jwt> header and validate it with Supabase before doing work.

Same-origin only (no CORS headers necessary).

Keep response shapes unchanged so the UI needs no changes.

Implementation plan

Install helper deps (if missing):

Ensure @supabase/supabase-js and zod are in deps (they likely are).

Create a tiny Supabase helper for serverless:
File: api/_supabase.ts

import { createClient } from '@supabase/supabase-js'
export function admin() {
  const url = process.env.SUPABASE_URL!
  const key = process.env.SUPABASE_SERVICE_ROLE_KEY!
  return createClient(url, key, { auth: { persistSession: false } })
}
export function bearer(req: { headers: Record<string, any> }) {
  const raw = (req.headers['authorization'] || req.headers['Authorization'] || '') as string
  return raw.replace(/^Bearer\s+/i, '')
}


Suggestions endpoint:
File: api/suggestions/today.ts

import type { VercelRequest, VercelResponse } from '@vercel/node'
import { admin, bearer } from '../_supabase'
// If there is a shared suggestion builder, import it, e.g.:
// import { buildTodaySuggestion } from '../../shared/suggestions/engine'

export default async function handler(req: VercelRequest, res: VercelResponse) {
  if (req.method !== 'GET') return res.status(405).json({ message: 'Method Not Allowed' })
  res.setHeader('Cache-Control', 'no-store')

  const supa = admin()
  const token = bearer(req)
  const { data: userData, error: authErr } = await supa.auth.getUser(token)
  if (authErr || !userData?.user) return res.status(401).json({ message: 'Unauthorized' })
  const userId = userData.user.id

  // 1) fetch recent workouts & wearable summary from your tables
  //    NOTE: reuse your existing SQL/queries. If helpers exist in /shared or /server, import them.
  //    Example (adjust to your schema):
  const { data: wkts, error: wErr } = await supa
    .from('workouts')
    .select('*')
    .eq('user_id', userId)
    .gte('created_at', new Date(Date.now() - 1000*60*60*24*30).toISOString())
    .order('created_at', { ascending: false })
  if (wErr) return res.status(500).json({ message: 'Failed fetching workouts' })

  const { data: hr, error: hrErr } = await supa
    .from('health_reports')
    .select('*')
    .eq('user_id', userId)
    .order('date', { ascending: false })
    .limit(1)
    .single()
  if (hrErr && hrErr.code !== 'PGRST116') { // ignore "no rows" if that’s your code
    return res.status(500).json({ message: 'Failed fetching health report' })
  }

  // 2) build suggestion (either call existing engine or do a minimal fallback)
  // If you have a shared engine, prefer that. Otherwise:
  const lastWorkout = wkts?.[0] ?? null
  const sleepScore = hr?.metrics?.sleep_score ?? null
  // Simple placeholder to match your UI shape; replace with your real builder if available:
  const suggestion = {
    category: 'Cardio',
    intensity: 5,
    duration_min: 30,
    rationale: sleepScore ? `Excellent sleep (${sleepScore}%) → reduce fatigue by 0.10` : 'Based on recent training load',
    // add whatever fields your UI expects
  }

  return res.status(200).json(suggestion)
}


Groups endpoints:
File: api/groups/index.ts

import type { VercelRequest, VercelResponse } from '@vercel/node'
import { admin, bearer } from '../../_supabase'

export default async function handler(req: VercelRequest, res: VercelResponse) {
  res.setHeader('Cache-Control', 'no-store')
  const supa = admin()
  const token = bearer(req)
  const { data: userData, error: authErr } = await supa.auth.getUser(token)
  if (authErr || !userData?.user) return res.status(401).json({ message: 'Unauthorized' })
  const userId = userData.user.id

  if (req.method === 'GET') {
    const { data, error } = await supa
      .from('groups')     // adjust table name
      .select('id,name,photo_url,created_at')
      .contains('members', [userId]) // or your join table… adapt to your schema
    if (error) return res.status(500).json({ message: 'Unable to fetch your groups' })
    return res.status(200).json(data ?? [])
  }

  if (req.method === 'POST') {
    const { name, photo_url } = (req.body ?? {}) as { name?: string; photo_url?: string }
    if (!name) return res.status(400).json({ message: 'name is required' })
    // insert group and add current user as member/owner:
    const { data, error } = await supa.from('groups').insert({
      name, photo_url: photo_url ?? null, owner_id: userId, created_at: new Date().toISOString()
    }).select().single()
    if (error) return res.status(500).json({ message: 'Failed to create group' })
    // If you have a separate members table, insert it here too.
    return res.status(201).json(data)
  }

  return res.status(405).json({ message: 'Method Not Allowed' })
}


Environment variables on Vercel (Project → Settings → Environment Variables):

SUPABASE_URL

SUPABASE_SERVICE_ROLE_KEY

OPENAI_API_KEY (if your suggestion engine needs it)

VITE_SUPABASE_URL

VITE_SUPABASE_ANON_KEY

VITE_SITE_URL = https://axle-ebon.vercel.app
(No VITE_API_URL needed if front-end calls same-origin /api.)

Frontend check: Confirm that the suggestions fetcher calls fetch('/api/suggestions/today', { headers: { Authorization: 'Bearer ' + token }}). If it still points at http://localhost:5000 or a Replit URL, change it to relative /api/... for prod.

Deploy & test:

Push to GitHub → Vercel auto-builds.

In browser devtools on prod: call /api/suggestions/today manually, verify 200 JSON.

Reload the Workouts page; the card should render real data (or your sleep-based text).

(Optional) Add a Vercel rewrite to keep URLs pretty:
If your front end ever hardcodes VITE_API_URL, add a vercel.json:

{ "rewrites": [ { "source": "/api/(.*)", "destination": "/api/$1" } ] }


(Mainly a placeholder—same-origin calls already work.)

Make unauthenticated users hit the auth screen first (prod & dev):

Ensure your root routes are wrapped by ProtectedRoute so the first page unauth users see is /auth/login.

If needed, add a top-level guard in App.tsx that redirects to /auth/login whenever !session.

Ship logs: Log errors in the functions with console.error so they show in Vercel logs.

Deliverables

api/_supabase.ts, api/suggestions/today.ts, api/groups/index.ts committed.

Verified 200 responses from /api/suggestions/today and /api/groups on the Vercel domain (with a valid Bearer token).

Daily Suggested Workout shows in prod for a signed-in user.

Groups page loads in prod for a signed-in user.

Unauthed users are redirected to the auth flow on first load.