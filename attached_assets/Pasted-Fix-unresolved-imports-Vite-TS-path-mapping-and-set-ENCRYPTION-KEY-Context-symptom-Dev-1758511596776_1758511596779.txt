Fix unresolved @/... imports (Vite + TS path mapping) and set ENCRYPTION_KEY

Context / symptom:
Dev startup shows:

Error: The following dependencies are imported but could not be resolved:
  @/components/ui/toaster
  @/components/ui/tooltip
  @/components/ui/theme-provider
  @/components/layout/app-layout
  @/components/auth/ProtectedRoute
  @/lib/supabase
  @/store/useAppStore
  @/dev/Overlay
  @/pages/not-found
  @/pages/home
  ...
Are they installed?

*Plus warning:

ENCRYPTION_KEY should be at least 32 characters ...

Goal:
Unify alias resolution so @ → client/src works in Vite and TypeScript; verify those files actually exist (case-sensitive), clean caches, and set a proper ENCRYPTION_KEY.

Tasks
	1.	Replace vite.config.ts with this (keeps our Replit plugins; forces SPA; fixes aliases):

    import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";
import path from "path";
import runtimeErrorOverlay from "@replit/vite-plugin-runtime-error-modal";

export default defineConfig(async ({ mode }) => {
  const repoRoot = process.cwd();
  const appRoot = path.resolve(repoRoot, "client");

  const plugins = [react(), runtimeErrorOverlay()];
  if (mode !== "production" && process.env.REPL_ID) {
    const { cartographer } = await import("@replit/vite-plugin-cartographer");
    const { devBanner } = await import("@replit/vite-plugin-dev-banner");
    plugins.push(cartographer(), devBanner());
  }

  return {
    // SPA + correct build output for Vercel/Replit
    root: appRoot,
    appType: "spa",
    base: "/",
    publicDir: path.resolve(repoRoot, "public"),
    build: {
      outDir: path.resolve(repoRoot, "dist"),
      emptyOutDir: true,
    },
    plugins,
    resolve: {
      alias: [
        { find: "@",  replacement: path.resolve(appRoot, "src") },
        { find: "@/", replacement: path.resolve(appRoot, "src") + "/" }, // handles both "@/x" and "@x"
        { find: "@shared",  replacement: path.resolve(repoRoot, "shared") },
        { find: "@assets",  replacement: path.resolve(repoRoot, "attached_assets") },
      ],
    },
    server: { fs: { strict: true, deny: ["**/.*"] } },
  };
});

2.	Align TypeScript path mapping
Update tsconfig.json at repo root (preserve existing options, but ensure these keys exist):

{
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@/*": ["client/src/*"],
      "@shared/*": ["shared/*"],
      "@assets/*": ["attached_assets/*"]
    }
  }
}

*If there is a tsconfig.app.json or tsconfig.node.json, mirror the same compilerOptions.paths there too.

    3.	Verify files actually exist (case-sensitive)
Run this quick check and print a report. If any path is false, fix the import or rename the file to match case:

node -e "const fs=require('fs'); const list=[
'client/src/components/ui/toaster.tsx',
'client/src/components/ui/tooltip.tsx',
'client/src/components/ui/theme-provider.tsx',
'client/src/components/layout/app-layout.tsx',
'client/src/components/auth/ProtectedRoute.tsx',
'client/src/lib/supabase.ts',
'client/src/store/useAppStore.ts',
'client/src/dev/Overlay.tsx',
'client/src/pages/not-found.tsx',
'client/src/pages/home.tsx',
'client/src/pages/workout.tsx',
'client/src/pages/workout-detail.tsx',
'client/src/pages/history.tsx',
'client/src/pages/health.tsx',
'client/src/pages/prs.tsx',
'client/src/pages/achievements.tsx',
'client/src/pages/profile.tsx',
'client/src/pages/EditProfile.tsx',
'client/src/pages/connect.tsx',
'client/src/pages/reports.tsx',
'client/src/pages/workout-generate.tsx',
'client/src/pages/workout/LogFreeform.tsx',
'client/src/pages/dev-env.tsx',
'client/src/pages/dev/Debug.tsx',
'client/src/pages/dev/Tokens.tsx',
'client/src/pages/dev/Components.tsx',
'client/src/pages/dev/Compare.tsx',
'client/src/pages/groups/index.tsx',
'client/src/pages/groups/NewGroup.tsx',
'client/src/pages/groups/GroupInvite.tsx',
'client/src/pages/groups/GroupJoin.tsx',
'client/src/pages/groups/GroupFeed.tsx',
'client/src/pages/auth/Login.tsx',
'client/src/pages/auth/Register.tsx',
'client/src/pages/auth/Callback.tsx',
'client/src/pages/auth/ResetPassword.tsx',
'client/src/App.tsx'
]; list.forEach(p=>console.log((fs.existsSync(p) ? 'OK   ' : 'MISS ')+p));"

*If any are missing, either adjust the import in client/src/App.tsx to the real path (respecting exact casing), or create/rename the component so the import matches. Linux/Node are case-sensitive.

	4.	Clean caches & reinstall (prevents stale resolution)

    rm -rf node_modules .vite dist
npm ci

	5.	Set a secure ENCRYPTION_KEY
In Replit → Secrets, add ENCRYPTION_KEY with at least 32 chars (e.g., a 44-char base64 string or a 64-char hex). Example generator:

node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"

	6.	Start dev & verify

    npm run dev
# visit / (and a couple of routes like /login, /history) — no “could not be resolved” errors

	7.	Build check

    npm run build
ls -la dist
# expect: dist/index.html and dist/assets/*

Acceptance:
	•	Dev server starts with no unresolved module errors for @/....
	•	Routes render; the UI components (toaster/tooltip/theme) load.
	•	ENCRYPTION_KEY warning disappears.
	•	npm run build outputs dist/index.html and dist/assets/*.
	•	Then STOP and report what changed.

Notes:
	•	The “Are they installed?” text is Vite’s generic message for any unresolved import. In our case, it’s not missing packages; it’s alias resolution + (potentially) filename casing.
	•	We added both @ and @/ aliases to catch import styles used in the codebase.
	•	If any shadcn UI file doesn’t exist (e.g., toaster.tsx, tooltip.tsx), scaffold them with the standard shadcn snippets or adjust imports to what exists.