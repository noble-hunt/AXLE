“Refactor Manage Wearables to full-width rows”

Goal: Replace the 2–3 column card grid with full-width horizontal cards that stretch across the content width, just like the “Development Mode” bar (but taller). Ensure titles/subtitles fit, status/meta are readable, and actions don’t overlap or wrap awkwardly.

1) Add a new row component

Create client/src/components/health/ProviderRow.tsx:

import React from "react";
import clsx from "clsx";

type Status = "connected" | "disconnected" | "error" | "unavailable";

export type ProviderRowProps = {
  id: string;
  title: string;
  subtitle?: string;
  status: Status;
  lastSync?: string | null;
  busy?: boolean;
  badge?: "Unavailable" | "Beta" | null;
  onConnect?: () => void;
  onSync?: () => void;
  onDisconnect?: () => void;
};

function StatusDot({ status }: { status: Status }) {
  const color =
    status === "connected"
      ? "bg-green-500"
      : status === "error"
      ? "bg-red-500"
      : "bg-gray-500";
  return <span className={clsx("inline-block w-2 h-2 rounded-full", color)} />;
}

export default function ProviderRow({
  title,
  subtitle,
  status,
  lastSync,
  busy,
  badge,
  onConnect,
  onSync,
  onDisconnect,
}: ProviderRowProps) {
  const isUnavailable = status === "unavailable";

  return (
    <div
      className={clsx(
        "relative rounded-2xl bg-[--layer-2] border border-white/5",
        "px-4 py-4 md:px-6 md:py-5",
        "flex flex-col gap-4 md:flex-row md:items-center"
      )}
    >
      {/* Pinned badge */}
      {badge && (
        <span
          className={clsx(
            "absolute top-3 right-3 rounded-full px-2.5 py-1 text-xs font-semibold z-10",
            badge === "Unavailable" ? "bg-white text-black" : "bg-white/20 text-white backdrop-blur"
          )}
        >
          {badge}
        </span>
      )}

      {/* Left: title / subtitle */}
      <div className="min-w-0 flex-1">
        <h3 className="text-lg font-semibold leading-tight truncate">{title}</h3>
        {subtitle && (
          <p className="mt-1 text-sm text-[--muted] leading-snug line-clamp-2">
            {subtitle}
          </p>
        )}
      </div>

      {/* Middle: status/meta */}
      <div className="md:w-56">
        <div className="text-sm text-[--muted] flex items-center gap-2">
          <StatusDot status={status} />
          <span className="capitalize">
            {status === "unavailable" ? "Unavailable" : status}
          </span>
        </div>
        {lastSync && status === "connected" && (
          <div className="mt-1 text-xs text-[--muted]">
            <span className="opacity-80">Last sync:</span> {lastSync}
          </div>
        )}
      </div>

      {/* Right: actions */}
      <div className="w-full md:w-auto md:ml-auto">
        {isUnavailable ? (
          <button
            disabled
            title="Provider configuration required"
            className="w-full md:w-auto cursor-not-allowed opacity-60 rounded-xl border border-white/10 px-4 py-2 text-sm font-medium whitespace-nowrap"
          >
            Connect
          </button>
        ) : status === "connected" ? (
          <div className="flex flex-col md:flex-row gap-2 md:justify-end">
            <button
              onClick={onSync}
              disabled={busy}
              className="rounded-xl px-4 py-2 text-sm font-medium whitespace-nowrap bg-blue-600 text-white hover:bg-blue-500"
            >
              {busy ? "Syncing…" : "Sync Now"}
            </button>
            <button
              onClick={onDisconnect}
              disabled={busy}
              className="rounded-xl px-4 py-2 text-sm font-medium whitespace-nowrap bg-red-600/90 text-white hover:bg-red-600"
            >
              Disconnect
            </button>
          </div>
        ) : (
          <button
            onClick={onConnect}
            disabled={busy}
            className="w-full md:w-auto rounded-xl px-4 py-2 text-sm font-medium whitespace-nowrap bg-blue-600 text-white hover:bg-blue-500"
          >
            {busy ? "Connecting…" : "Connect"}
          </button>
        )}
      </div>
    </div>
  );
}


Note: Requires Tailwind @tailwindcss/line-clamp plugin. If not enabled, add it to tailwind.config.js (plugins: [require('@tailwindcss/line-clamp')]) and restart dev.

2) Replace the grid with a vertical list of rows

Edit the page that renders providers (e.g., client/src/pages/health/providers/ProvidersPage.tsx). Remove the multi-column grid; render a stacked list:

// imports…
import ProviderRow from "@/components/health/ProviderRow";

function formatTime(ts?: string) {
  if (!ts) return null;
  try {
    const d = new Date(ts);
    return d.toLocaleTimeString([], { hour: "numeric", minute: "2-digit" });
  } catch {
    return null;
  }
}

// inside component render:
return (
  <div className="mx-auto w-full max-w-[1100px] px-4 md:px-6">
    {/* Top stats + Dev Mode remain unchanged */}
    <h2 className="text-3xl font-bold mt-6 mb-3">Health Providers</h2>

    <div className="flex flex-col gap-3">
      {providers.map((p) => {
        const conn = connectionsById[p.id];
        const status =
          !p.available
            ? ("unavailable" as const)
            : conn?.status === "connected"
            ? ("connected" as const)
            : conn?.status === "error"
            ? ("error" as const)
            : ("disconnected" as const);

        const badge =
          status === "unavailable" ? "Unavailable" : p.id === "Garmin" ? "Beta" : null;

        const title =
          p.id === "Mock" ? "Mock Provider"
          : p.id === "Whoop" ? "WHOOP 4.0"
          : p.id === "Oura" ? "Oura Ring"
          : p.id === "Garmin" ? "Garmin Connect"
          : p.id === "Fitbit" ? "Fitbit"
          : p.id;

        const subtitle =
          p.id === "Mock"
            ? "Development testing provider"
            : p.description || undefined;

        return (
          <ProviderRow
            key={p.id}
            id={p.id}
            title={title}
            subtitle={subtitle}
            status={status}
            lastSync={formatTime(conn?.last_sync)}
            busy={busy === p.id || busy === "sync:" + p.id}
            badge={badge as any}
            onConnect={() => handleConnect(p.id)}
            onSync={() => handleSync(p.id)}
            onDisconnect={() => handleDisconnect(p.id)}
          />
        );
      })}
    </div>
  </div>
);


Delete the old grid grid-cols-* container and any tooltip wrappers (data-tip, custom Tooltip) around action buttons—they caused overlays and clipping.

3) Ensure consistent spacing with “Development Mode”

Wrap the Dev Mode bar in the same container (mx-auto max-w-[1100px] px-4 md:px-6) and add mb-3 so it doesn’t crowd the rows.

Make sure nothing absolutely-positioned inside Dev Mode overlaps the provider list.

4) Button styles (optional but recommended)

If you rely on utility classes everywhere, you’re good. If you want shared styles, create client/src/styles/buttons.css and import it once (e.g., in main.tsx):

.btn { @apply rounded-xl px-4 py-2 text-sm font-medium whitespace-nowrap; }
.btn-primary { @apply bg-blue-600 text-white hover:bg-blue-500; }
.btn-danger { @apply bg-red-600/90 text-white hover:bg-red-600; }
.btn-ghost { @apply border border-white/10; }


Then swap classes accordingly. (Not required if you keep the classes embedded as above.)

Acceptance Criteria

Layout

Providers render as full-width horizontal cards inside max-w-[1100px].

Cards no longer appear “pinched” or too narrow; no column layout remains.

Titles/subtitles never overflow; long text truncates neatly; no overlaps.

Badges & status

“Unavailable” / “Beta” badges are pinned at top-right of each card and don’t overlap text or buttons.

Status row shows a dot + text and, when connected, Last sync time in smaller muted text.

Actions

Buttons are right-aligned on desktop; on small screens they stack vertically with clean spacing.

“Sync Now” and “Disconnect” never overlap; labels remain one line.

Unavailable providers show a disabled Connect with a title “Provider configuration required”.

Spacing

There is consistent vertical rhythm (gap-3) between rows and separation from the Dev Mode bar.

No tooltip/overlay blocks click targets.