Edit Group: photo picker (camera roll) via signed upload + scroll fix

Update client/src/pages/groups/EditGroup.tsx (replace the “Photo URL” field)

import { useState } from 'react';
import { supabase } from '@/lib/supabaseClient';

async function getSignedUpload(groupId: string, filename: string) {
  const res = await fetch('/api/storage/group-photos/signed-upload', {
    method: 'POST',
    headers: { 'content-type': 'application/json' },
    body: JSON.stringify({ groupId, filename }),
  });
  if (!res.ok) throw new Error(await res.text());
  return (await res.json()) as { path: string; token: string; signedUrl?: string };
}

function PhotoPicker({ groupId, value, onChange }:{ groupId:string; value?:string; onChange:(url:string)=>void }) {
  const [busy, setBusy] = useState(false);
  const onFile = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0]; if (!file) return;
    setBusy(true);
    try {
      const { path, token, signedUrl } = await getSignedUpload(groupId, file.name);
      const storage:any = supabase.storage.from('group-photos');
      if (typeof storage.uploadToSignedUrl === 'function') {
        const { error } = await storage.uploadToSignedUrl(path, token, file);
        if (error) throw error;
      } else {
        await fetch(signedUrl!, { method: 'PUT', body: file, headers: { 'x-upsert': 'true' } });
      }
      const { data } = supabase.storage.from('group-photos').getPublicUrl(path);
      onChange(data.publicUrl);
    } catch (err:any) { alert(err.message || 'Upload failed'); }
    finally { setBusy(false); e.target.value=''; }
  };
  return (
    <div className="flex items-center gap-4">
      <img src={value||''} className="h-16 w-16 rounded-xl object-cover bg-[--layer-3]" alt="" onError={ev=>((ev.target as HTMLImageElement).src='')} />
      <label className="btn">
        {busy ? 'Uploading…' : 'Choose Photo'}
        <input type="file" accept="image/*" className="hidden" onChange={onFile} />
      </label>
    </div>
  );
}


Use it in the form:

// state
const [photoUrl, setPhotoUrl] = useState(group.photo_url ?? '');

// UI: replace the Photo URL input
<PhotoPicker groupId={group.id} value={photoUrl} onChange={setPhotoUrl} />

// On Save:
const { error } = await supabase.from('groups')
  .update({ name, description, visibility, photo_url: photoUrl })
  .eq('id', group.id);
if (error) throw error;


Scroll/padding fix (avoid tab bar clipping):

// wrap page
<div className="h-[100dvh] overflow-y-auto">
  <div className="mx-auto max-w-md px-4 pb-[calc(env(safe-area-inset-bottom)+96px)]">
    {/* form content */}
  </div>
</div>


Acceptance

Tapping Choose Photo opens the mobile photos app; upload works; preview updates; Save persists and header shows it.

You can scroll and fully see/tap the bottom button.