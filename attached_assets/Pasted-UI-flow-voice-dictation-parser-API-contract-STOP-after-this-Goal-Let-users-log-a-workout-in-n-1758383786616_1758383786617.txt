UI flow + voice dictation + parser API contract (STOP after this)

Goal
Let users log a workout in natural language (voice or text), preview a structured summary, edit if needed, then save to History.

Add UI

On the Workout tab/page header, add a primary button “Log your own workout” that routes to /workout/log.

Create page src/pages/workout/LogFreeform.tsx with:

Instruction text (small):
“Describe your workout in plain English. Include category or style (e.g., CrossFit/HIIT, Powerlifting, Aerobic), format (EMOM/AMRAP/For time/Strength), sets & reps, weights or time caps, and total time. Example:
‘CrossFit. 20 min AMRAP: 10 pull-ups, 15 push-ups, 20 air squats. Finished 8 rounds. Felt 7/10 intensity.’”

Textarea with character count and placeholder examples; allow 2–3k chars.

Voice dictation (dev first): add a mic button using the Web Speech API (if available). Press to start/stop; append recognized transcript to the textarea. If unsupported, hide the mic button.

Parse button → calls /api/workouts/parse-freeform (see below).

Parsed preview card showing:

Top row: Category, Duration (min), Intensity (1–10), Format (EMOM/AMRAP/For Time/Strength/Skill/Intervals/Circuit/Other).

Movements list with sets rendered like “3×10 Back Squat @ 100 kg” or “EMOM 12: 5 burpees”.

Edit toggle: inline edit fields for category (segmented control), duration (number), intensity (1–10 slider), format (segmented), and each movement/set (add/remove/set scheme and notes).

Confirm & Log button → POST /api/workouts/log-freeform with the final structured object; on success, navigate to /workout/:id then History reflects it.

Types (use existing where possible)

Ensure these exist in src/types.ts and are imported in the page:

export type FreeformParsed = {
  request: WorkoutRequest;        // { category, durationMinutes, intensity }
  format: "EMOM"|"AMRAP"|"For Time"|"Strength"|"Skill"|"Intervals"|"Circuit"|"Other";
  sets: WorkoutSet[];             // reuse existing shape
  title: string;                  // e.g., "AMRAP 20 - Pull/Push/Squat"
  notes?: string;
  confidence: number;             // 0..1 from AI
};


If WorkoutSet lacks what we need, extend minimally with optional repScheme?: string and timeCapMinutes?: number.

Client calls

Add src/lib/authFetch.ts if not present, and use it (Bearer token).

POST /api/workouts/parse-freeform with { text: string }, expects { parsed: FreeformParsed }.

POST /api/workouts/log-freeform with { parsed: FreeformParsed }, expects { id: string }.

UX details

Show a confidence chip (High/Med/Low). If < 0.6, show a yellow banner “Please review before saving.”

If parsing fails, show a Manual form link that expands a simple structured form (category/duration/intensity/format + sets table) so the user can still log.

Acceptance (then STOP)

/workout/log renders; mic works on browsers that support it; textarea parses successfully; preview matches parsed data; edits change the payload.

Confirm logs and navigates to /workout/:id; the new workout appears at the top of /history after refresh.