Native notifications (APNs) + local scheduling (Capacitor)

Goal: Register device tokens, schedule local notifications on device, and send remote pushes from server. Keep web push code intact; add APNs path in the same queue.

Implement native notifications for iOS using Capacitor.

Client (React):
1) Install plugins:
   npm i @capacitor/push-notifications @capacitor/local-notifications

2) Create client/src/lib/nativeNotifications.ts:
   - export async function requestPushPermissions(): Promise<boolean>
     Uses PushNotifications.checkPermissions() then requestPermissions().
   - export async function registerPushToken(onToken: (token:string)=>void)
     Calls PushNotifications.register() and attaches listeners:
       'registration' -> onToken(token.value)
       'registrationError' -> console.error
       'pushNotificationActionPerformed' -> handle deep links later
   - export async function scheduleLocal(id:number, title:string, body:string, at:Date)
     Uses LocalNotifications.requestPermissions() then schedule([ { id, title, body, schedule:{ at }, smallIcon:'ic_stat_icon' } ])

3) Add a small UI under More → Settings (or Privacy):
   - Toggle “Enable notifications”
   - Time picker “Daily workout reminder”
   When ON:
     - await requestPushPermissions(); await registerPushToken(send to backend)
     - immediately scheduleLocal for tomorrow at chosen time (and reschedule daily)
   When OFF:
     - (optional) cancel local notifications

4) On app start (only in Capacitor environment), ping backend to hydrate scheduled server pushes later.

Server:
5) SQL: add device tokens and unify queue channels:

   create table if not exists public.device_tokens (
     id uuid primary key default gen_random_uuid(),
     user_id uuid not null references auth.users(id) on delete cascade,
     platform text not null default 'ios', -- 'ios' | 'web'
     token text not null,                  -- APNs device token
     created_at timestamptz not null default now(),
     last_seen timestamptz not null default now(),
     unique(user_id, token)
   );
   alter table public.device_tokens enable row level security;
   create policy "own device tokens"
     on public.device_tokens for all
     using (auth.uid() = user_id) with check (auth.uid() = user_id);

   -- extend notifications queue to carry channel
   alter table public.notifications add column if not exists channel text default 'auto';

6) Add routes in server/routes/push-native.ts:
   - POST /api/push/register-device  (auth required)
     body { token:string, platform?:'ios' }
     upsert into device_tokens.
   - POST /api/push/test-native  (auth) -> send APNs to all user device_tokens.

7) Server/lib/apns.ts:
   - Implement APNs HTTP/2 sender using `@parse/node-apn-http2` or a tiny fetch to api.push.apple.com with JWT constructed from APNS_KEY (p8), APNS_KEY_ID, APNS_TEAM_ID.
   - export async function sendApns(token:string, payload:{title:string, body:string, data?:any})

8) Cron dispatcher (reuse existing /api/cron/notifications-run):
   - For each due queued notification:
     if channel='auto':
       - if user has device_tokens => send APNs
       - else if user has push_subscriptions => send Web Push
     if channel='apns' => APNs only; if 'webpush' => web only.
     Update status/sent_at accordingly.
     (Optional) re-enqueue daily reminders as before.

9) Client registration hook:
   - When registerPushToken fires, POST to /api/push/register-device with the token.

ACCEPTANCE:
- On first run in Simulator, the app asks for notification permission.
- Registering returns 200 and a new row in public.device_tokens.
- POST /api/push/test-native delivers an APNs notification to the device/simulator (use a physical device to fully validate).
- Scheduling a daily reminder creates a Local Notification at the chosen local time.