Fix unresolved @/... imports by aligning aliases, auto-rewriting paths, and stubbing missing UI files

Context / Symptom

Vite fails to resolve many @/... imports from client/src/App.tsx (toaster, tooltip, theme-provider, AppLayout, ProtectedRoute, pages, etc.). We previously added aliases; issue persists likely due to path casing / filename mismatches or files that were never created.

Goals
	•	@ must map to client/src in Vite and TypeScript.
	•	Auto-detect and rewrite imports that don’t match actual filenames (fix kebab vs PascalCase, folder name casing).
	•	Create minimal stubs for any truly missing shadcn-style files (components/ui/toaster.tsx, tooltip.tsx, theme-provider.tsx) and other referenced components if absent.
	•	Clean caches, reinstall, and get the dev server running.

Tasks

1) Ensure Vite + TS alias are correct

Replace vite.config.ts contents with:

Fix unresolved @/... imports by aligning aliases, auto-rewriting paths, and stubbing missing UI files

Context / Symptom

Vite fails to resolve many @/... imports from client/src/App.tsx (toaster, tooltip, theme-provider, AppLayout, ProtectedRoute, pages, etc.). We previously added aliases; issue persists likely due to path casing / filename mismatches or files that were never created.

Goals
	•	@ must map to client/src in Vite and TypeScript.
	•	Auto-detect and rewrite imports that don’t match actual filenames (fix kebab vs PascalCase, folder name casing).
	•	Create minimal stubs for any truly missing shadcn-style files (components/ui/toaster.tsx, tooltip.tsx, theme-provider.tsx) and other referenced components if absent.
	•	Clean caches, reinstall, and get the dev server running.

Tasks

1) Ensure Vite + TS alias are correct

Replace vite.config.ts contents with:

import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";
import path from "path";
import runtimeErrorOverlay from "@replit/vite-plugin-runtime-error-modal";

export default defineConfig(async ({ mode }) => {
  const repoRoot = process.cwd();
  const appRoot = path.resolve(repoRoot, "client");

  const plugins = [react(), runtimeErrorOverlay()];
  if (mode !== "production" && process.env.REPL_ID) {
    const { cartographer } = await import("@replit/vite-plugin-cartographer");
    const { devBanner } = await import("@replit/vite-plugin-dev-banner");
    plugins.push(cartographer(), devBanner());
  }

  return {
    root: appRoot,
    appType: "spa",
    base: "/",
    publicDir: path.resolve(repoRoot, "public"),
    build: { outDir: path.resolve(repoRoot, "dist"), emptyOutDir: true },
    plugins,
    resolve: {
      alias: [
        { find: "@",  replacement: path.resolve(appRoot, "src") },
        { find: "@/", replacement: path.resolve(appRoot, "src") + "/" },
        { find: "@shared",  replacement: path.resolve(repoRoot, "shared") },
        { find: "@assets",  replacement: path.resolve(repoRoot, "attached_assets") },
      ],
    },
    server: { fs: { strict: true, deny: ["**/.*"] } },
  };
});

Update tsconfig.json at repo root to include:

{
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@/*": ["client/src/*"],
      "@shared/*": ["shared/*"],
      "@assets/*": ["attached_assets/*"]
    }
  }
}

(If there are tsconfig.app.json / tsconfig.node.json, mirror the paths block.)

2) Add a resolver script to auto-fix imports

Create scripts/fix-imports.mjs:

import fs from "fs";
import path from "path";
import glob from "glob";

const repoRoot = process.cwd();
const appRoot = path.join(repoRoot, "client", "src");

function existsAny(base) {
  const exts = ["", ".tsx", ".ts", ".jsx", ".js", "/index.tsx", "/index.ts"];
  for (const ext of exts) {
    const p = path.join(appRoot, base + ext);
    if (fs.existsSync(p)) return p;
  }
  return null;
}

function pascal(s) {
  return s.split(/[-_]/g).map(x => x ? x[0].toUpperCase() + x.slice(1) : "").join("");
}

function findByLooseName(lastSeg) {
  const needle = lastSeg.replace(/[-_]/g, "").toLowerCase();
  const files = glob.sync("**/*.{tsx,ts,jsx,js}", { cwd: appRoot, nodir: true });
  for (const f of files) {
    const base = path.basename(f, path.extname(f)).replace(/[-_]/g, "").toLowerCase();
    if (base === needle) return path.join(appRoot, f);
  }
  return null;
}

function toAlias(pAbs) {
  const rel = path.relative(path.join(repoRoot, "client", "src"), pAbs).split(path.sep).join("/");
  return "@/" + rel.replace(/\/index\.(tsx|ts)$/, "");
}

function fixInFile(file) {
  let src = fs.readFileSync(file, "utf8");
  const importRe = /from\s+["']@\/([^"']+)["']/g;
  let changed = false;
  const seen = new Set();
  src = src.replace(importRe, (m, rel) => {
    if (seen.has(rel)) return m;
    seen.add(rel);
    // if exists as-is, keep
    const exact = existsAny(rel);
    if (exact) return m;
    // try PascalCase on last segment
    const parts = rel.split("/");
    const last = parts.pop();
    const try1 = existsAny([...parts, pascal(last)].join("/"));
    if (try1) {
      const newAlias = toAlias(try1);
      changed = true;
      return `from "${newAlias}"`;
    }
    // try PascalCase of all segments
    const try2 = existsAny(parts.map(pascal).concat(pascal(last)).join("/"));
    if (try2) {
      const newAlias = toAlias(try2);
      changed = true;
      return `from "${newAlias}"`;
    }
    // try loose search by name anywhere
    const hit = findByLooseName(last);
    if (hit) {
      const newAlias = toAlias(hit);
      changed = true;
      return `from "${newAlias}"`;
    }
    // leave as-is; will be stubbed later
    return m;
  });
  if (changed) fs.writeFileSync(file, src);
  return changed;
}

function main() {
  const files = glob.sync("client/src/**/*.{tsx,ts,jsx,js}", { cwd: repoRoot, nodir: true });
  let total = 0;
  for (const f of files) {
    if (fixInFile(path.join(repoRoot, f))) total++;
  }
  console.log(`[fix-imports] files changed: ${total}`);
}
main();

Add glob:

npm i -D glob

3) Stub any truly missing UI/util files

Create minimal components if missing (compile-only; replace later):
	•	client/src/components/ui/toaster.tsx

export default function Toaster() { return null; }

	•	client/src/components/ui/tooltip.tsx

import { ReactNode } from "react";
export function Tooltip({ children }: { children: ReactNode }) { return <>{children}</>; }
export function TooltipTrigger({ children }: { children: ReactNode }) { return <>{children}</>; }
export function TooltipContent({ children }: { children: ReactNode }) { return <>{children}</>; }

	•	client/src/components/ui/theme-provider.tsx

import { ReactNode } from "react";
export function ThemeProvider({ children }: { children: ReactNode }) { return <>{children}</>; }

	•	client/src/components/layout/AppLayout.tsx (match import after auto-fix; PascalCase)

import { ReactNode } from "react";
export default function AppLayout({ children }: { children: ReactNode }) { return <div>{children}</div>; }

	•	client/src/components/auth/ProtectedRoute.tsx

import { ReactNode } from "react";
export default function ProtectedRoute({ children }: { children: ReactNode }) { return <>{children}</>; }

	•	client/src/dev/Overlay.tsx

export default function Overlay(){ return null; }

For pages that still 404 after the fixer, create placeholders (if missing), e.g. client/src/pages/home.tsx:

export default function Home(){ return <div>Home</div>; }

(Do similar quick stubs for any missing pages from the error list.)

Ensure client/src/lib/supabase.ts and client/src/store/useAppStore.ts exist; if not, create minimal placeholders to compile:
	•	client/src/lib/supabase.ts

export const supabase = {} as any;

	•	client/src/store/useAppStore.ts

export default function useAppStore(){ return {} as any; }

4) Clean caches, run the fixer, and reinstall

rm -rf node_modules .vite dist
npm ci
node scripts/fix-imports.mjs

5) Start dev & verify

npm run dev
# App should boot; navigate to a few routes to confirm.

6) (Optional) Set ENCRYPTION_KEY to remove the warning

If not already set, in Replit Secrets add a 32+ char key:

node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"

Acceptance (then STOP)
	•	Dev server starts with no unresolved @/... errors.
	•	npm run build emits dist/index.html and dist/assets/*.
	•	ENCRYPTION_KEY warning gone (if you set it).
	•	List any imports the fixer rewrote and any files it stubbed; we’ll replace stubs with real components later.