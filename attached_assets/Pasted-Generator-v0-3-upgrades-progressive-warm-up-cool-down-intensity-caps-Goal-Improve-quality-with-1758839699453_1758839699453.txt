Generator v0.3 upgrades (progressive, warm-up/cool-down, intensity caps)

Goal: Improve quality without waiting for the fine-tuned model. Deterministic, explainable, and tied to your proprietary scores.

Implement in server/lib/generator/ (suggested files):

movementTaxonomy.ts

Define a small curated set with tags: pattern (hinge, squat, push, pull, core, mono), equipment, plane, energySystem, loadability.

Export helpers filterByEquipment, avoidConstraints, sampleBalanced(pool, rng).

templates.ts

Structure templates:

strength-fullbody-3x3, strength-upper-lower-4x5,

mixed-emom-18, mixed-amrap-15,

endurance-intervals-8x1min, etc.

Each template describes:

Blocks, work/rest, set/rep/time, target energy system, movement role slots.

intensity.ts

Map targetIntensity (1–10) → ranges for:

total sets/volume, rest windows, time-under-tension.

Cap intensity using AXLE metrics:

if (vitality < 40 || axleScore < 40) cap targetIntensity at 6
if (performancePotential < 35) bias to aerobic / skill, reduce volume by 20%
if (circadian < 35) prefer earlier day / shorter sessions (if time is flexible)


Compute sessionIntensityPlan: gentle wave inside session (ramp up, peak, down).

progression.ts

Read last N (e.g., 4) workouts for the user in same archetype.

Apply progressive overload rule:

Strength blocks: +2.5–5% load or +1 set if last RPE < 7; deload if last RPE ≥ 9 or fatigue flag high.

Conditioning: volume or density bump by 5–10%, every 2–3 exposures; built-in deload every 4–5 exposures.

Return progressionDirectives the generator can apply.

warmupCooldown.ts

Build warm-up from selected patterns (e.g., hip hinge warmup for hinge day) and cooldown/respiration set if intensity ≥ 7.

generateWorkout.ts

Inputs: GeneratorSeed (with metrics context).

Process:

Pick template based on archetype + minutes.

Build movement pool via taxonomy filters and constraints.

Apply intensity caps (AXLE scores) and progression directives.

Fill template slots with specific movements (balanced patterns).

Attach warm-up and cooldown.

Return normalized workout JSON + choices to write back into gen_seed.

Tests (Vitest):

Deterministic with same seed.

Equipment constraints respected.

Intensity capped when low performancePotential.

Progression increases load/volume on successive seeds.

Server endpoints updated to call generateWorkout(seed) and persist.