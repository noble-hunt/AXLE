Invite page QR (centered) + deep-link join route

Create client/src/pages/groups/InviteToGroup.tsx and use VITE_SITE_URL.

import { useParams } from 'react-router-dom';
import { useMemo } from 'react';
import { QRCodeCanvas } from 'qrcode.react';
const SITE = import.meta.env.VITE_SITE_URL;

export default function InviteToGroup() {
  const { id } = useParams<{ id: string }>();
  const inviteUrl = useMemo(()=> `${SITE}/g/${id}`, [id]);
  return (
    <div className="mx-auto max-w-md px-4 pb-24">
      <div className="mt-6 rounded-3xl bg-[--layer-2] p-6 flex flex-col items-center">
        <div className="rounded-2xl bg-white p-4 shadow-md">
          <QRCodeCanvas value={inviteUrl} size={240} includeMargin level="M" />
        </div>
        <p className="mt-3 text-center text-[--muted] break-all">{inviteUrl}</p>
        <button className="btn mt-2" onClick={()=>navigator.clipboard.writeText(inviteUrl)}>Copy invite link</button>
        <div className="mt-6 text-center text-sm text-[--muted]">Scan to join the group</div>
      </div>
    </div>
  );
}


Create client/src/pages/groups/JoinGroupPage.tsx:

import { useEffect, useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { supabase } from '@/lib/supabaseClient';

export default function JoinGroupPage() {
  const { id } = useParams<{id:string}>();
  const nav = useNavigate();
  const [group, setGroup] = useState<any>(null);
  const [joining, setJoining] = useState(false);

  useEffect(()=>{(async()=>{
    const session = (await supabase.auth.getSession()).data.session;
    if (!session) { nav(`/auth?redirect=${encodeURIComponent(`/g/${id}`)}`, { replace:true }); return; }
    const { data } = await supabase.from('groups').select('id,name,visibility,photo_url,description').eq('id', id).maybeSingle();
    setGroup(data);
  })();},[id,nav]);

  const join = async ()=>{
    setJoining(true);
    const userId = (await supabase.auth.getUser()).data.user?.id!;
    const { data: exists } = await supabase.from('group_members').select('user_id').eq('group_id', id).eq('user_id', userId).maybeSingle();
    if (!exists) {
      const { error } = await supabase.from('group_members').insert({ group_id: id!, user_id: userId, role:'member' });
      if (error) { setJoining(false); alert(error.message); return; }
    }
    nav(`/groups/${id}`, { replace:true });
  };

  if (!group) return <div className="p-6">Loading…</div>;

  return (
    <div className="mx-auto max-w-md px-4 pb-24">
      <div className="mt-6 rounded-3xl bg-[--layer-2] p-6">
        <div className="flex items-center gap-4">
          {group.photo_url ? <img src={group.photo_url} className="h-12 w-12 rounded-xl object-cover" alt=""/> : <div className="h-12 w-12 rounded-xl bg-[--layer-3]"/>}
          <div>
            <div className="text-lg font-semibold">{group.name}</div>
            <div className="text-sm text-[--muted]">{group.visibility==='public'?'Public':'Private'} group</div>
          </div>
        </div>
        {group.description && <p className="mt-4 text-[--muted]">{group.description}</p>}
        <button className="btn w-full mt-6" disabled={joining} onClick={join}>{joining?'Joining…':'Join Group'}</button>
      </div>
    </div>
  );
}


Wire routes (and remove stray glyph in header while you’re here):

// client/src/routes.tsx
<Route path="/groups/:id/invite" element={<InviteToGroup />} />
<Route path="/g/:id" element={<JoinGroupPage />} />


In the group header component, remove any placeholder span after the lock icon (e.g., "-", "—", or an empty <span/>).

Acceptance

Invite QR is centered and scannable.

Scanning opens /g/:id; if signed out → auth → back to join → Join works.