Server: guarantee & expose the preview route

Goal: Ensure /api/workouts/preview exists, is mounted, and always returns JSON. Also add a temporary route map so we can visually confirm routing.

Changes:

Create/confirm preview route

File: server/routes/workouts.ts

import { Router } from "express";
import { z } from "zod";
export const workouts = Router();

const PreviewSchema = z.object({
  focus: z.enum(["strength","conditioning","mixed","endurance"]),
  durationMin: z.number().int().min(5).max(180),
  equipment: z.array(z.string()).default([]),
  intensity: z.number().min(1).max(10),
  seed: z.string().optional()
});

workouts.post("/preview", async (req, res) => {
  // If auth is required, wrap with requireAuth; for now keep public to simplify dev
  const parsed = PreviewSchema.safeParse(req.body);
  if (!parsed.success) {
    return res.status(400).json({ ok:false, error:"invalid_request", details:parsed.error.flatten() });
  }

  try {
    // TODO: replace with your real generator
    const { focus, durationMin, equipment, intensity, seed } = parsed.data;
    const preview = {
      seed: seed ?? crypto.randomUUID(),
      blocks: [
        { type:"warmup", minutes: Math.max(5, Math.round(durationMin/6)), notes:`${focus} warmup` },
        { type:"main", minutes: Math.round(durationMin*0.7), notes:`intensity ${intensity}/10`, equipment },
        { type:"cooldown", minutes: Math.max(3, Math.round(durationMin/10)), notes:"breathing / mobility" }
      ]
    };
    return res.json({ ok:true, preview, seed: preview.seed });
  } catch (err:any) {
    req.log?.error({ err }, "preview failed");
    return res.status(500).json({ ok:false, error:"preview_failed" });
  }
});

// Back-compat aliases so any old callers still work
workouts.post("/generate/preview", (req,res,next) => {
  (workouts as any).handle({ ...req, url: "/preview" }, res, next);
});


Mount the router & add a temporary route index

File: server/index.ts

import express from "express";
import { workouts } from "./routes/workouts";
const app = express();
app.use(express.json());

app.use("/api/workouts", workouts);

// TEMP route index for debugging
app.get("/api/_routes", (req, res) => {
  res.json({
    ok: true,
    routes: [
      "POST /api/workouts/preview",
      "POST /api/workouts/generate/preview (alias)"
    ]
  });
});

export { app };


Acceptance:

curl http://localhost:5000/api/_routes ⇒ JSON with the preview routes listed.

curl -s -X POST http://localhost:5000/api/workouts/preview -H "content-type: application/json" -d '{"focus":"strength","durationMin":30,"equipment":[],"intensity":6}' ⇒ { ok:true, preview:{...} }.