Client API, realtime hook, send (kill /messages entirely)

Create/Update

client/src/features/groups/api.ts

client/src/features/groups/hooks/useGroupPostsRealtime.ts

replace any /messages usage

// client/src/features/groups/api.ts
import { supabase } from '@/lib/supabaseClient';

export type GroupPost = {
  id: number;
  group_id: string;
  author_id: string;
  body: string;
  meta: any | null;
  created_at: string;
};

export async function fetchGroupPosts(groupId: string, since?: string) {
  const token = (await supabase.auth.getSession()).data.session?.access_token;
  const qs = since ? `?since=${encodeURIComponent(since)}` : '';
  const res = await fetch(`/api/groups/${groupId}/posts${qs}`, {
    headers: { Authorization: `Bearer ${token ?? ''}` },
  });
  if (!res.ok) {
    console.error('[groups/posts] load failed', res.status, await res.text());
    throw new Error('Unable to fetch group feed');
  }
  return (await res.json()).posts as GroupPost[];
}

export async function sendPost(groupId: string, text: string) {
  const body = text.trim();
  if (!body) return null;
  const { data, error } = await supabase
    .from('group_posts')
    .insert({ group_id: groupId, body, meta: null })
    .select('*').single();
  if (error) throw error;
  return data as GroupPost;
}

// client/src/features/groups/hooks/useGroupPostsRealtime.ts
import { useEffect, useRef } from 'react';
import { RealtimeChannel } from '@supabase/supabase-js';
import { useSupabaseClient } from '@/lib/supabaseClient';
type OnInsert = (row: any) => void;

export function useGroupPostsRealtime(groupId: string | undefined, onInsert: OnInsert) {
  const supabase = useSupabaseClient();
  const onInsertRef = useRef(onInsert);
  onInsertRef.current = onInsert;
  const channelRef = useRef<RealtimeChannel | null>(null);

  useEffect(() => {
    if (!groupId) return;
    if (channelRef.current) {
      supabase.removeChannel(channelRef.current);
      channelRef.current = null;
    }
    const ch = supabase
      .channel(`grp:${groupId}`)
      .on('postgres_changes',
        { event: 'INSERT', schema: 'public', table: 'group_posts', filter: `group_id=eq.${groupId}` },
        (payload) => onInsertRef.current(payload.new))
      .subscribe((status) => {
        if (status === 'SUBSCRIBED') console.debug('[Realtime] subscribed', groupId);
      });
    channelRef.current = ch;

    return () => {
      if (channelRef.current) {
        supabase.removeChannel(channelRef.current);
        console.debug('[Realtime] unsubscribed', groupId);
        channelRef.current = null;
      }
    };
  }, [groupId, supabase]);
}


Refactor / remove

Search the repo for /messages and replace with the helpers above.

Composer uses sendPost.

Feed loader uses fetchGroupPosts.

Acceptance

No network calls to /messages?....

On open: one “subscribed”; on navigate away: one “unsubscribed”.