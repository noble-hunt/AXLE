Add strict per-style content policies

Files: server/ai/config/stylePolicies.ts (new), server/ai/generators/premium.ts

Task: Create explicit policies and enforce in sanitizer.

stylePolicies.ts

export interface StylePolicy {
  allowed_categories: string[];
  required_patterns?: string[];   // any of these must appear
  required_any?: string[][];      // at least one of each group (e.g., [['olympic_snatch'], ['olympic_cleanjerk']])
  banned_regex?: RegExp[];        // names that must not appear
  require_loaded_ratio?: number;  // mains only ratio
  require_barbell_only?: boolean; // e.g., Oly mains
}
export const STYLE_POLICIES: Record<string, StylePolicy> = {
  olympic_weightlifting: {
    allowed_categories: ['olympic_weightlifting'],
    required_any: [['olympic_snatch'], ['olympic_cleanjerk']],
    banned_regex: [/db snatch/i, /thruster/i, /bear crawl/i, /star jump/i, /burpee/i, /mountain climber/i],
    require_loaded_ratio: 0.85,
    require_barbell_only: true
  },
  powerlifting: {
    allowed_categories: ['powerlifting'],
    required_any: [['squat'], ['bench'], ['hinge']],
    banned_regex: [/thruster/i, /burpee/i, /double under/i],
    require_loaded_ratio: 0.85
  },
  crossfit: {
    allowed_categories: ['crossfit'],
    banned_regex: [/wall sit/i, /star jump/i, /high knees/i, /jumping jacks/i],
    require_loaded_ratio: 0.60
  },
  bb_full_body:   { allowed_categories:['bb_full_body'], require_loaded_ratio:0.70 },
  bb_upper:       { allowed_categories:['bb_upper'],     require_loaded_ratio:0.70 },
  bb_lower:       { allowed_categories:['bb_lower'],     require_loaded_ratio:0.70 },
  aerobic:        { allowed_categories:['aerobic'] },
  gymnastics:     { allowed_categories:['gymnastics'] },
  mobility:       { allowed_categories:['mobility'] }
};


Enforce in sanitizer (premium.ts):

import { STYLE_POLICIES } from '../config/stylePolicies';

function enforceStylePolicy(workout:any, REG:Map<string,any>, style:string) {
  const policy = STYLE_POLICIES[style]; if (!policy) return { ok:true };
  const mains = workout.blocks.filter((b:any)=>!['warmup','cooldown'].includes(b.kind));
  const items = mains.flatMap((b:any)=>b.items||[]);
  const names = items.map((it:any)=>String(it.exercise||''));
  const regs  = items.map((it:any)=>REG.get(it.registry_id||'')).filter(Boolean);

  // allowed categories only
  const badCat = regs.find((m:any)=>!policy.allowed_categories.includes(m.category));
  if (badCat) return { ok:false, reason:`bad_category:${badCat.category}`, offender:badCat.name };

  // required patterns
  if (policy.required_any) {
    for (const group of policy.required_any) {
      const hit = regs.some((m:any)=>m.patterns?.some((p:string)=>group.includes(p)));
      if (!hit) return { ok:false, reason:`missing_required_group:${group.join('|')}` };
    }
  }

  // banned regex
  if (policy.banned_regex?.length) {
    const bad = names.find(n => policy.banned_regex!.some(rx => rx.test(n)));
    if (bad) return { ok:false, reason:`banned:${bad}` };
  }

  // barbell-only mains
  if (policy.require_barbell_only) {
    const nonBB = regs.find((m:any)=>!m.equipment?.includes('barbell'));
    if (nonBB) return { ok:false, reason:`non_barbell:${nonBB.name}` };
  }

  // main loaded ratio
  if (policy.require_loaded_ratio != null) {
    const r = loadedRatioMainOnly(workout.blocks, REG);
    if (r < policy.require_loaded_ratio) return { ok:false, reason:`low_loaded_ratio:${r.toFixed(2)}` };
  }

  return { ok:true };
}

// In sanitizeWorkout() after building blocks and substitutions:
const policyRes = enforceStylePolicy(workout, REG, style);
if (!policyRes.ok) {
  // try auto-substitute once from registry (same pattern/category but compliant)
  const fixed = tryAutoFixByPolicy(workout, REG, style, policyRes);
  if (!fixed) throw new Error(`style_violation:${policyRes.reason}`);
}
workout.meta = { ...(workout.meta||{}), style_ok:true };


(Implement tryAutoFixByPolicy(...) to swap offenders with nearest valid registry match.)