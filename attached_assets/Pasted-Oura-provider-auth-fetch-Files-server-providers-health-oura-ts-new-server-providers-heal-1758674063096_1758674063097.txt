Oura provider (auth + fetch)

Files

server/providers/health/oura.ts (new)

// server/providers/health/oura.ts
import type { HealthProvider } from './types';
import { upsertWearableTokenForUser, getWearableTokenForUser } from '../../dal/tokens';      // your DAL
import { upsertWearableConnection } from '../../dal/wearables';                               // your DAL
import { verifyState, signState } from '../../lib/oauthState';

const OURA_AUTH = 'https://cloud.ouraring.com/oauth/authorize';
const OURA_TOKEN = 'https://cloud.ouraring.com/oauth/token';
const OURA_API   = 'https://api.ouraring.com/v2/usercollection';

const SITE = process.env.VITE_SITE_URL || process.env.SITE_URL || 'https://axle-ebon.vercel.app';
const REDIRECT = `${SITE}/api/connect/Oura/callback`;

export class OuraHealthProvider implements HealthProvider {
  id: HealthProvider['id'] = 'Oura';

  hasConfig() {
    return !!(process.env.OURA_CLIENT_ID && process.env.OURA_CLIENT_SECRET);
  }

  async authStart(userId: string) {
    if (!this.hasConfig()) throw new Error('Oura not configured');
    const state = signState({ userId, t: Date.now() });
    const params = new URLSearchParams({
      response_type: 'code',
      client_id: process.env.OURA_CLIENT_ID!,
      redirect_uri: REDIRECT,
      // Adjust scopes as needed in your Oura app config
      scope: 'daily heartrate activity sleep',
      state,
    });
    return { redirectUrl: `${OURA_AUTH}?${params.toString()}` };
  }

  async authCallback(params: Record<string, string>) {
    const { code, state } = params;
    if (!code || !state) throw new Error('Missing code/state');
    const { userId } = verifyState(state);

    const form = new URLSearchParams({
      grant_type: 'authorization_code',
      code,
      redirect_uri: REDIRECT,
      client_id: process.env.OURA_CLIENT_ID!,
      client_secret: process.env.OURA_CLIENT_SECRET!,
    });

    const tokRes = await fetch(OURA_TOKEN, {
      method: 'POST',
      headers: { 'content-type': 'application/x-www-form-urlencoded' },
      body: form.toString(),
    });
    const tokens = await tokRes.json() as any;
    if (!tokRes.ok) throw new Error(tokens?.error_description || 'token exchange failed');

    // Persist securely via your existing DAL
    await upsertWearableTokenForUser(userId, 'Oura', {
      access_token: tokens.access_token,
      refresh_token: tokens.refresh_token,
      expires_at: tokens.expires_in ? Date.now() + tokens.expires_in * 1000 : null,
      scope: tokens.scope,
    });
    await upsertWearableConnection(userId, 'Oura', { status: 'connected', last_error: null });
  }

  async fetchLatest(userId: string) {
    const tok = await getWearableTokenForUser(userId, 'Oura'); // returns decrypted token object
    if (!tok?.access_token) throw new Error('Not connected');

    const auth = { Authorization: `Bearer ${tok.access_token}` };

    // Fetch yesterday..today to be safe across timezones
    const end = new Date(); const start = new Date(end); start.setDate(end.getDate() - 1);
    const fmt = (d: Date) => d.toISOString().slice(0, 10);

    const [sleepRes, activityRes] = await Promise.all([
      fetch(`${OURA_API}/daily_sleep?start_date=${fmt(start)}&end_date=${fmt(end)}`, { headers: auth }),
      fetch(`${OURA_API}/daily_activity?start_date=${fmt(start)}&end_date=${fmt(end)}`, { headers: auth }),
    ]);

    const sleepJson: any = await sleepRes.json();
    const actJson: any = await activityRes.json();

    const sleep = sleepJson?.data?.[0] || {};
    const activity = actJson?.data?.[0] || {};

    // Map to your HealthSnapshot type
    const snapshot = {
      provider: 'Oura' as const,
      date: sleep?.day || activity?.day || new Date().toISOString().slice(0,10),
      hrv_ms: null as number | null,                        // Oura’s HRV ms requires additional endpoint; optional for MVP
      resting_hr_bpm: sleep?.average_heart_rate ?? sleep?.lowest_heart_rate ?? null,
      sleep_score: sleep?.score ?? null,
      stress_0_10: null as number | null,
      steps: activity?.steps ?? null,
      calories: activity?.cal_total ?? activity?.active_calories ?? null,
      raw: { sleep, activity },
    };

    return snapshot;
  }
}


Note: HRV ms can be added later via Oura’s detailed HRV endpoint. The dashboard will show — for missing values, which is fine for MVP.