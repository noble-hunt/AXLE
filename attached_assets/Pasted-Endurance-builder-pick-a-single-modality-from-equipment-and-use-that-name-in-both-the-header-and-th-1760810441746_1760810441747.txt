Endurance builder: pick a single modality from equipment and use that name in both the header and the item

Edit server/ai/config/patternPackBuilders.ts: add/replace the modality picker and use it in the Endurance block.

// Add near top (or alongside other helpers)
function pickCyclical(equipment: string[] = []): { name: string; patterns: string[]; registryIdHint?: string } {
  const eq = (equipment || []).map(e => String(e).toLowerCase());
  if (eq.includes('rower'))        return { name: 'Row',      patterns: ['row','erg','cyclical'], registryIdHint: 'row' };
  if (eq.includes('bike') || eq.includes('air_bike') || eq.includes('assault_bike'))
                                   return { name: 'Bike',     patterns: ['bike','erg','cyclical'], registryIdHint: 'bike' };
  if (eq.includes('treadmill'))    return { name: 'Run',      patterns: ['run','cyclical'],        registryIdHint: 'run' };
  if (eq.includes('ski_erg'))      return { name: 'Ski Erg',  patterns: ['ski','erg','cyclical'],  registryIdHint: 'ski' };
  if (eq.includes('jump_rope'))    return { name: 'Jump Rope',patterns: ['jump_rope','cyclical'],  registryIdHint: 'jump_rope' };
  // Fallback if nothing cyclical present
  return { name: 'Jump Rope',      patterns: ['jump_rope','cyclical'], registryIdHint: 'jump_rope' };
}

// In buildEndurancePack(totalMin, requestedIntensity, equipment)
export function buildEndurancePack(totalMin: number, requestedIntensity = 6, equipment?: string[]): PatternPack {
  // ... existing time budget math ...
  const mod = pickCyclical(equipment);

  // choose structure by intensity (Steady / Cruise / VO2)
  const isSteady = requestedIntensity <= 6;
  const isTempo  = requestedIntensity === 7;

  const mainBlockBase = {
    select: [{ categories: ['endurance','aerobic'], patterns: mod.patterns, items: 1 }],
    // we’ll rewrite the selected item’s name during sanitize to the chosen mod.name
  };

  if (isSteady) {
    mainBlocks.push({
      ...mainBlockBase,
      pattern: 'STEADY',
      minutes: budget,
      title: `Steady ${mod.name} Z2–Z3`,
      notes:  `Continuous ${budget}:00 @ Z2–Z3. Nose-breathing pace.`
    });
  } else if (isTempo) {
    mainBlocks.push({
      ...mainBlockBase,
      pattern: 'CRUISE',
      minutes: budget,
      title: `Cruise Intervals ${mod.name} Z3–Z4`,
      notes:  `3 x ${(budget/3)|0}:00 @ Z3–Z4, ${Math.max(2,Math.round(budget/9))}:00 easy between.`
    });
  } else {
    mainBlocks.push({
      ...mainBlockBase,
      pattern: 'VO2',
      minutes: budget,
      title: `VO2 Repeats ${mod.name} Z4–Z5`,
      notes:  `10 x 1:00 hard / 1:00 easy. Even effort; don’t sprint the first reps.`
    });
  }

  return {
    name: 'Endurance',
    warmupMin: 8,
    cooldownMin: 8,
    hardnessFloor: 0.80,
    mainBlocks
  };
}
