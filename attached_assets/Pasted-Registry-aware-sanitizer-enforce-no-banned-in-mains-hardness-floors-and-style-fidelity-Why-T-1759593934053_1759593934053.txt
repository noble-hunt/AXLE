Registry-aware sanitizer (enforce “no banned in mains”, hardness floors, and style fidelity)

Why: To keep hard workouts hard and stop BW fillers from sneaking into main blocks when gear exists.

Do this exactly (in server/ai/generators/premium.ts sanitizer):

import registryData from '../../data/movements.registry.min.json';
const REG = new Map(registryData.map((m:any)=>[m.id,m]));

// helper
function isLoaded(m:any){ return m.equipment?.some((e:string)=>['barbell','dumbbell','kettlebell','machine','sandbag','sled','cable'].includes(e)); }
function isBannedInMain(m:any){ return !!m.banned_in_main_when_equipment; }

export function sanitizeWorkout(workout:any, req:any, pack:PatternPack, seed:string){
  const equip = (req.equipment||[]).map((e:string)=>e.toLowerCase());
  const hasGear = equip.some(e=>/(barbell|dumbbell|kettlebell)/.test(e));

  // 1) Remove banned BW in mains if gear exists; rotate replacement
  const ROT = ["db-box-step-overs","kb-swings","wall-balls","burpees"]; // registry ids if available
  let rot=0, bannedFound=false;
  const mains = workout.blocks.filter((b:any)=>!['warmup','cooldown'].includes(b.kind));
  for (const b of mains){
    b.items = (b.items||[]).map((it:any)=>{
      const mv = REG.get(it.registry_id||'');
      if (hasGear && mv && isBannedInMain(mv)){
        bannedFound = true;
        const sub = REG.get(ROT[rot++ % ROT.length]);
        return {
          ...it,
          registry_id: sub?.id || it.registry_id,
          exercise: sub?.name || it.exercise,
          notes: ((it.notes||'') + ' (auto-upgrade)').trim(),
          _bannedReplaced: true
        };
      }
      return it;
    });
  }

  // 2) Hardness floor per style
  const lowReady = Boolean(req?.wearable_snapshot?.sleep_score && req.wearable_snapshot.sleep_score < 60);
  const floor = hasGear && !lowReady ? (pack.hardnessFloor || 0.85) : (lowReady ? 0.55 : 0.75);

  // 3) Bonus for loaded mains; penalty for BW-only mains with gear
  let score = computeHardness(workout);
  for (const b of mains){
    const loaded = (b.items||[]).filter((it:any)=>{ const mv=REG.get(it.registry_id||''); return mv && isLoaded(mv); }).length;
    const bodywt = (b.items||[]).filter((it:any)=>{ const mv=REG.get(it.registry_id||''); return mv && mv.equipment?.includes('bodyweight'); }).length;
    if (loaded>0) score += 0.03;
    if (hasGear && bodywt>=2) score -= 0.07;
  }
  workout.variety_score = score;

  workout.acceptance_flags = {
    ...(workout.acceptance_flags||{}),
    no_banned_in_mains: hasGear ? !bannedFound : true,
    hardness_ok: workout.variety_score >= floor
  };

  return workout;
}


Acceptance check (run):

curl -s http://localhost:5000/api/workouts/generate \
 -H 'Content-Type: application/json' \
 -d '{"goal":"powerlifting","durationMin":45,"intensity":8,"equipment":["barbell"],"seed":"SAN1"}' \
 | jq '.workout.meta.acceptance'


Expect hardness_ok:true, no_banned_in_mains:true.