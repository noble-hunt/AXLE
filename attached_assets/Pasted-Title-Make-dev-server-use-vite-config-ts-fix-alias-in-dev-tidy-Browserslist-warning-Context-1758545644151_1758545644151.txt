Title: Make dev server use vite.config.ts (fix @/ alias in dev) + tidy Browserslist warning

Context:
Prod (Vercel) builds and runs fine. Dev fails with unresolved @/... imports from client/src/App.tsx. Root cause: the Express dev server initializes Vite with configFile:false or without loading vite.config.ts, so aliases are ignored. We need dev parity with prod.

Goals:

Dev server should load vite.config.ts (respect root:"client", aliases for @, @shared, etc.).

Remove any symlink workaround (src -> client/src) and ensure client/index.html uses the standard Vite entry.

Keep prod (Vercel) behavior unchanged.

Quiet the Browserslist warning.

Tasks

Replace server/vite.ts with this implementation that truly loads our Vite config and adds middleware mode:

// server/vite.ts
import path from "path";
import type { Express } from "express";
import {
  createServer,
  loadConfigFromFile,
  mergeConfig,
  type InlineConfig,
} from "vite";

export async function attachVite(
  app: Express,
  mode: "development" | "production" = "development"
) {
  const repoRoot = process.cwd();
  const root = path.resolve(repoRoot, "client");
  const configPath = path.resolve(repoRoot, "vite.config.ts");

  // Load the user's config exactly as Vite CLI would
  const loaded = await loadConfigFromFile({ mode, command: "serve" }, configPath, root);
  const userConfig = (loaded?.config ?? {}) as InlineConfig;

  // Merge in middleware settings for Express dev
  const finalConfig = mergeConfig(userConfig, {
    root,
    appType: "spa",
    server: { middlewareMode: true, hmr: true },
  } as InlineConfig);

  const vite = await createServer(finalConfig);
  app.use(vite.middlewares);
  return vite;
}


Ensure server/index.ts uses the helper above:

// server/index.ts (snippet)
import express from "express";
import { attachVite } from "./vite";

const app = express();

if (process.env.NODE_ENV !== "production") {
  await attachVite(app, "development");
}

// …existing API routes etc.

const PORT = Number(process.env.PORT || 5000);
app.listen(PORT, () => console.log(`[express] serving on port ${PORT}`));


Remove the symlink hack (if present) and standardize the HTML entry:

Remove symlink at repo root:

rm -f src (only if it’s a symlink to client/src).

In client/index.html, make sure the entry is the default Vite form:

<script type="module" src="/src/main.tsx"></script>


Confirm vite.config.ts root & aliases (don’t change these unless they differ):

root must be client.

Aliases must include:

@ → <repo>/client/src

@shared → <repo>/shared

@assets → <repo>/attached_assets

(Optional but nice) Add TS path hints
In tsconfig.json, add (or keep) this so editors/TS see the same aliases:

{
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@/*": ["client/src/*"],
      "@shared/*": ["shared/*"],
      "@assets/*": ["attached_assets/*"]
    }
  }
}


Silence Browserslist warning (doesn’t affect the alias bug):

Add a one-time update script to package.json or just run it in postinstall:

{
  "scripts": {
    "postinstall": "npx update-browserslist-db@latest --yes || true"
  }
}


Clean & verify

rm -rf node_modules .vite dist
npm ci
npm run dev


Expected: Dev server starts, @/... imports resolve, no “Are they installed?” list.

Prod build still OK: npm run build emits dist/public correctly.

Acceptance Criteria

Visiting the dev app shows no unresolved module errors for @/....

No src -> client/src symlink exists.

client/index.html uses /src/main.tsx.

npm run build still succeeds.

Browserslist warning is gone or reduced to a single info line.

Then STOP and report what changed (files diff + confirmation of dev/prod parity).