Group feed API (dev + prod, UUID-safe, ?since= support)

Create:

api/groups/[id]/posts.ts (Vercel)

server/routes/groups.ts (Express) and mount at /api/groups

// api/groups/[id]/posts.ts
import { supabaseFromReq } from '../../_supabase';
export const config = { runtime: 'nodejs18.x' };
const isUuid = (v: string) => /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(v);

export default async function handler(req: Request, ctx: { params: { id: string } }) {
  if (req.method !== 'GET') return new Response('Method Not Allowed', { status: 405 });
  const groupId = ctx.params.id;
  if (!isUuid(groupId)) return new Response(JSON.stringify({ error: 'Invalid group id' }), { status: 400, headers:{'content-type':'application/json'} });

  const supabase = supabaseFromReq(req);
  const url = new URL(req.url);
  const since = url.searchParams.get('since');

  let q = supabase
    .from('group_posts')
    .select('id, group_id, author_id, body, meta, created_at')
    .eq('group_id', groupId)
    .order('created_at', { ascending: false })
    .limit(50);
  if (since) q = q.gte('created_at', since);

  const { data, error } = await q;
  if (error) return new Response(JSON.stringify({ error: error.message }), { status: 400, headers:{'content-type':'application/json'} });
  return new Response(JSON.stringify({ posts: data ?? [] }), { status: 200, headers:{ 'content-type':'application/json', 'cache-control':'no-store' }});
}

// server/routes/groups.ts
import { Router } from 'express';
import { supabaseFromReq } from '../lib/supabaseFromReq';
const router = Router();

router.get('/:id/posts', async (req, res) => {
  const groupId = req.params.id;
  const supabase = supabaseFromReq(req);
  const since = req.query.since as string | undefined;

  let q = supabase
    .from('group_posts')
    .select('id, group_id, author_id, body, meta, created_at')
    .eq('group_id', groupId)
    .order('created_at', { ascending: false })
    .limit(50);
  if (since) q = q.gte('created_at', since);

  const { data, error } = await q;
  if (error) return res.status(400).json({ error: error.message });
  res.json({ posts: data ?? [] });
});

export default router;

// server/index.ts (mount dev router once)
import groupsRouter from './routes/groups';
app.use('/api/groups', groupsRouter);


Done when: in dev and prod, GET /api/groups/<uuid>/posts returns 200 with {posts:[]}.