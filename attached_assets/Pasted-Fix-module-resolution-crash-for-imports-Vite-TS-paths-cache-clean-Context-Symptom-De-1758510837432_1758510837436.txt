Fix module resolution crash for @/... imports (Vite + TS paths + cache clean)

Context / Symptom:
Dev server crashes with a Vite error like:

Failed to resolve import “@/pages/auth/Login” (imported by client/src/App.tsx). Are they installed?

It lists: @/pages/auth/Login, @/pages/auth/Register, @/pages/auth/Callback, @/pages/auth/ResetPassword.

Goal:
Ensure the alias @ points to client/src everywhere (Vite and TypeScript), confirm those files exist, clean the Vite cache, and bring the app back up.

Tasks:
	1.	Harden Vite aliases and SPA config
Replace vite.config.ts with the version below (keep Replit plugins, but fix alias + ensure SPA, base, publicDir, outDir):

import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";
import path from "path";
import runtimeErrorOverlay from "@replit/vite-plugin-runtime-error-modal";

export default defineConfig(async ({ mode }) => {
  const root = path.resolve(process.cwd(), "client");

  const plugins = [react(), runtimeErrorOverlay()];
  if (mode !== "production" && process.env.REPL_ID) {
    const { cartographer } = await import("@replit/vite-plugin-cartographer");
    const { devBanner } = await import("@replit/vite-plugin-dev-banner");
    plugins.push(cartographer(), devBanner());
  }

  return {
    root,                   // app lives in /client
    appType: "spa",
    base: "/",
    publicDir: path.resolve(process.cwd(), "public"),
    build: {
      outDir: path.resolve(process.cwd(), "dist"), // produce dist/index.html
      emptyOutDir: true,
    },
    plugins,
    resolve: {
      alias: [
        { find: "@",  replacement: path.resolve(root, "src") },
        { find: "@/", replacement: path.resolve(root, "src") + "/" }, // handles both "@/x" and "@x"
        { find: "@shared", replacement: path.resolve(process.cwd(), "shared") },
        { find: "@assets", replacement: path.resolve(process.cwd(), "attached_assets") },
      ],
    },
    server: { fs: { strict: true, deny: ["**/.*"] } },
  };
});

	2.	Add TS path mapping (so the IDE/TS agrees with Vite)
Update tsconfig.json (repo root). Ensure:

{
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@/*": ["client/src/*"],
      "@shared/*": ["shared/*"],
      "@assets/*": ["attached_assets/*"]
    }
  }
}

*If there is a separate tsconfig.app.json or tsconfig.node.json, mirror the same paths 
there too.

    3.	Verify the files actually exist (guard against typos / casing)
Run a quick check and print the results:

node -e "const fs=require('fs');['client/src/pages/auth/Login.tsx','client/src/pages/auth/Register.tsx','client/src/pages/auth/Callback.tsx','client/src/pages/auth/ResetPassword.tsx','client/src/App.tsx'].forEach(p=>console.log(p,fs.existsSync(p)))"

*If any print false, fix the import paths or file names (case-sensitive in Linux).

	4.	Clean caches and reinstall (to clear stale Vite resolution):

    rm -rf node_modules .vite dist
npm ci

5.	Start dev and confirm
Run npm run dev and ensure:

	•	The app boots without the “Are they installed?” error.
	•	The auth pages route properly (visit /login, /register, /auth/callback, /auth/reset if defined).

	6.	(If still failing) Add a minimal reproduction check
Create a throwaway import in client/src/App.tsx to verify alias resolution:

// TEMP: alias probe
import _probe from "@/pages/auth/Login";
console.log("Alias @ works ->", !!_probe);

*If this still errors, log the resolved paths:

node -e "const p=require('path');console.log('cwd',process.cwd());"

*Ensure cwd is repo root and the Vite root is .../client.

Acceptance:
	•	Dev server starts; no “Failed to resolve import ‘@/…’” errors.
	•	Navigating to auth routes works.
	•	npm run build produces dist/index.html and dist/assets/*.
	•	Then STOP and report what changed.