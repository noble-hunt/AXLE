Fix the white screen (re-enable overlay, guard Sentry, add root error boundary)

Goal: If any client error happens, we see the error (overlay + UI fallback) and the app still renders. Also ensure Sentry can’t crash when DSNs are missing.

You are working in the AXLE repo.

1) Re-enable the Vite error overlay and strict source maps.

- Edit client/vite.config.ts:
  - Ensure: server: { hmr: { overlay: true } }
  - Ensure: build: { sourcemap: true }
  - Do not disable overlay anywhere.

2) Guard Sentry init so it never throws when env vars are missing.

- Create file client/src/sentry.ts:

  import * as Sentry from '@sentry/react';

  export function initSentry() {
    try {
      const dsn = import.meta.env.VITE_SENTRY_DSN_CLIENT;
      const env = import.meta.env.VITE_SENTRY_ENV || 'dev';
      if (!dsn) return; // no-op in local/dev without DSN
      Sentry.init({
        dsn,
        environment: env,
        tracesSampleRate: 0.1,
        replaysSessionSampleRate: 0.1,
        replaysOnErrorSampleRate: 1.0,
      });
    } catch (err) {
      // Never block app start on Sentry
      console.warn('Sentry init skipped:', err);
    }
  }

- In client/src/main.tsx (or wherever we bootstrap React), top-of-file:
  import { initSentry } from './sentry';
  initSentry();

3) Add a global Error Boundary so runtime errors don’t blank the UI.

- Create client/src/components/RootErrorBoundary.tsx:

  import * as Sentry from '@sentry/react';

  export const RootErrorBoundary = Sentry.withErrorBoundary(
    ({ children }: { children: React.ReactNode }) => <>{children}</>,
    {
      fallback: (
        <div style={{padding:'24px'}}>
          <h2>Something went wrong</h2>
          <p>If this persists, please refresh. We’ve logged the error.</p>
        </div>
      ),
    }
  );

- Wrap your app root with RootErrorBoundary in main.tsx:

  createRoot(el).render(
    <StrictMode>
      <RootErrorBoundary>
        <App/>
      </RootErrorBoundary>
    </StrictMode>
  );

4) Add a last-ditch runtime guard so a fatal boot error still shows something.

- In client/index.html just before </body>, add:

  <script>
    window.addEventListener('error', (e) => {
      if (!document.getElementById('boot-fatal')) {
        const d = document.createElement('div');
        d.id = 'boot-fatal';
        d.style.cssText = 'position:fixed;inset:0;display:flex;align-items:center;justify-content:center;background:#0b0f1a;color:#fff;z-index:999999';
        d.innerHTML = '<div style="max-width:640px;padding:24px;border-radius:16px;background:#111827;border:1px solid #374151;font:16px system-ui"><h2 style="margin:0 0 8px">App failed to start</h2><div>Check the browser console for details.</div></div>';
        document.body.appendChild(d);
      }
    }, { once: true });
  </script>

5) Start the app and confirm the overlay shows if an exception is thrown:
   - Temporarily add `throw new Error('boot test')` at top of App.tsx to verify overlay and boundary, then remove it.

ACCEPTANCE:
- Reloading the Replit preview no longer shows a blank white screen; if an error occurs, you see an overlay or the fallback panel.
- No Sentry-related error appears in the console when VITE_SENTRY_DSN_CLIENT is unset.