Prompt S1 — Backend data model + suggestion engine + API (STOP after this)

Goal
Add a persisted daily suggestion per user, computed from (a) yesterday’s workout (highest weight), (b) last 7/28 days (moderate weight), and (c) latest wearable/health metrics (moderating weight). If no data, fall back smartly.

1) DB: suggested_workouts table + RLS

Create migration supabase/migrations/002_suggested_workouts.sql:

create table if not exists public.suggested_workouts (
  id uuid primary key default gen_random_uuid(),
  user_id uuid not null references auth.users(id) on delete cascade,
  date date not null,                                  -- suggestion day (UTC)
  request jsonb not null,                              -- WorkoutRequest { category, durationMinutes, intensity }
  rationale jsonb not null,                            -- { rulesApplied: string[], scores: object, sources: object }
  workout_id uuid,                                     -- the generated workouts.id if we also generated one
  created_at timestamptz default now(),
  unique (user_id, date)
);
alter table public.suggested_workouts enable row level security;
create policy "suggested owner" on public.suggested_workouts for all
using (user_id = auth.uid()) with check (user_id = auth.uid());

2) Types + zod schema

Add to src/types.ts:

export type SuggestionRationale = {
  rulesApplied: string[];
  scores: {
    recency: number;  // 0..1, weight from yesterday
    weeklyBalance: number; // 0..1
    monthlyBalance: number; // 0..1
    fatigue: number;  // 0..1   higher = more fatigued
    novelty: number;  // 0..1   reward doing something different
  };
  sources: {
    lastWorkout?: Workout | null;
    weeklyCounts?: Record<Category, number>;
    monthlyCounts?: Record<Category, number>;
    health?: { hrv?: number|null; sleepScore?: number|null; restingHR?: number|null; stress?: number|null };
  };
};

export type SuggestedWorkout = {
  id?: string;
  date: string; // YYYY-MM-DD
  request: WorkoutRequest; // {category, durationMinutes, intensity}
  rationale: SuggestionRationale;
  workoutId?: string | null;
};


Install zod if missing and add server/logic/schemas.ts with zod validators for WorkoutRequest and SuggestedWorkout.